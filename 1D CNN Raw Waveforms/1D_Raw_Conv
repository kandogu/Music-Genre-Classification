{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"1D_Raw_Conv","provenance":[],"collapsed_sections":[],"mount_file_id":"121n2U5xEX8yRRjAmLYAPxI88M0srCn6W","authorship_tag":"ABX9TyO1Tf4wKBu9I9n28iuxFfgL"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"S5wKX2BAqbqW","colab_type":"code","colab":{}},"source":["import os\n","import librosa\n","import librosa.display\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import pathlib\n","import csv\n","import numpy as np\n","from os.path import dirname, join as pjoin\n","import warnings\n","import argparse\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","from sklearn.metrics import classification_report\n","import torch.optim as optim\n","#from torchvision import datasets, transforms\n","from torch.autograd import Variable\n","warnings.filterwarnings('ignore')\n","#from torchvision import datasets, transforms\n","from torch.autograd import Variable\n","warnings.filterwarnings('ignore')\n","from sklearn.metrics import multilabel_confusion_matrix\n","import seaborn as sn"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"pLHs2qnhYgd8","colab_type":"code","colab":{}},"source":["# %%\n","def report_performance(predictions, labels):\n","    genres = 'blues classical country disco hiphop jazz metal pop reggae rock'.split()\n","    \n","        \n","    if type(predictions).__module__ == torch.__name__ :\n","        predictions = predictions.tolist()\n","    if type(labels).__module__ == torch.__name__ :\n","        labels = labels.tolist()\n","    \n","    if type(predictions).__module__ == np.__name__ :\n","        predictions = list(predictions)\n","    if type(labels).__module__ == np.__name__ :\n","        labels = list(labels)\n","    \n","\n","    \n","    size = len(genres);\n","    i = 0;\n","    \n","    while i < 10:\n","        if i in predictions:        \n","            for j, x in enumerate(predictions):\n","                if x == i:\n","                   predictions[j] = genres[i + size - 10]\n","        if i in labels:\n","            for j, x in enumerate(labels):\n","                if x == i: \n","                    labels[j] = genres[i + size - 10]\n","        else: \n","            del genres[i + size - 10]\n","            size -= 1\n","        i+=1; \n","          \n","\n","    data = {'y_Actual':    labels,\n","            'y_Predicted': predictions\n","            }\n","    df = pd.DataFrame(data, columns=['y_Actual','y_Predicted'])\n","    confusion_matrix = pd.crosstab(df['y_Actual'], df['y_Predicted'], rownames=['Actual'], colnames=['Predicted'])\n","   \n","    sn.heatmap(confusion_matrix, annot=True)\n","    plt.show()\n","    print(classification_report(labels, predictions))\n","    \n","    cnf = multilabel_confusion_matrix(labels, predictions)\n","\n","    for i in range(0, len(genres)):\n","        if (cnf[i][0][1]+cnf[i][1][1]) != 0:\n","            print(\"Accuracy for\", genres[i], \"is:\", cnf[i][1][1]/(cnf[i][0][1]+cnf[i][1][1]), \"\\n\")\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"EIoQclXzqjBx","colab_type":"code","colab":{}},"source":["# %%  EXTRACT SOUND WAVES FROM SONGS\n","def extract_1d_data():\n","    genres = 'blues classical country disco hiphop jazz metal pop reggae rock'.split()\n","    data = []\n","    for g in genres:     \n","        for filename in os.listdir(f'drive/My Drive/machine learning/genres/{g}'):\n","            songname = f'drive/My Drive/machine learning/genres/{g}/{filename}'\n","            wave_data, sr = librosa.load(songname, sr=22050, mono=True, duration=25)\n","            data.append(wave_data)\n","    return data\n","\n","def shuffle(data, classes):\n","    dataset = np.r_['1', data, classes]\n","    print(np.shape(dataset))\n","    np.random.shuffle(dataset)\n","    n, m = np.shape(dataset)\n","    train_size = 700\n","    validation_size = 100\n","    test_size = 200\n","    train_data = dataset[:train_size].astype(dtype='float32')\n","    x_train_data = train_data[:,0:m-1]\n","    y_train_data = train_data[:,m-1]\n","    train_data = []\n","    for i in range(train_size):\n","        train_data.append([x_train_data[i], y_train_data[i]])\n","\n","    validation_data = dataset[train_size:train_size+validation_size].astype(dtype='float32')\n","    x_validation_data = validation_data[:,0:m-1]\n","    y_validation_data = validation_data[:,m-1]\n","\n","    validation_data = []\n","    for i in range(validation_size):\n","        validation_data.append([x_validation_data[i], y_validation_data[i]])\n","\n","    test_data = dataset[800:].astype(dtype='float32')\n","    x_test_data = test_data[:,0:m-1]\n","    y_test_data = test_data[:,m-1]\n","\n","    test_data = []\n","    for i in range(test_size):\n","        test_data.append([x_test_data[i], y_test_data[i]])\n","\n","    return train_data, validation_data,test_data\n","\n","def construct_labels():\n","    labels = []\n","    genres = 'blues classical country disco hiphop jazz metal pop reggae rock'.split()\n","    numeration = [0,1,2,3,4,5,6,7,8,9]\n","    for g in numeration:\n","        for i in range(100):\n","            labels.append(g)\n","    return np.reshape(labels,(1000,1))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"UEdndHQ9qmrO","colab_type":"code","colab":{}},"source":["data = extract_1d_data()\n","labels = construct_labels()\n","\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"RnywzW_nIMxv","colab_type":"code","outputId":"0c08bbf9-5e88-4774-90ad-4a74ca150d52","executionInfo":{"status":"ok","timestamp":1589111411957,"user_tz":-180,"elapsed":969364,"user":{"displayName":"Dogukan KÃ¶se","photoUrl":"","userId":"17163221167275333553"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["\n","train_data, validation_data,test_data = shuffle(data, labels)"],"execution_count":5,"outputs":[{"output_type":"stream","text":["(1000, 551251)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"DGqcdmRcbY40","colab_type":"code","colab":{}},"source":["def get_accuracy(logit, target, batch_size):\n","    ''' Obtain accuracy for training round '''\n","    corrects = (torch.max(logit, 1)[1].view(target.size()).data == target.data).sum()\n","    accuracy = 100.0 * corrects/batch_size\n","    return accuracy.item()\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"MeqmuTR0qqPp","colab_type":"code","colab":{}},"source":["# %% Construct a model\n","device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n","\n","\n","class Net(nn.Module):\n","\n","    def __init__(self):\n","        super(Net, self).__init__()\n","        self.conv1 = nn.Conv1d(1, 8, 27, stride=2)\n","        self.conv2 = nn.Conv1d(8, 16, 52)\n","        self.conv3 = nn.Conv1d(16, 48, 97, stride=2)\n","        self.conv4 = nn.Conv1d(48, 128, 127)\n","        self.ap = nn.AvgPool1d(8)\n","        self.mp2 = nn.MaxPool1d(8)\n","        self.ap2 = nn.AvgPool1d(4)\n","        self.mp1 = nn.MaxPool1d(4)\n","        self.mp3 = nn.MaxPool1d(4)\n","        self.fc = nn.Linear(119936, 128)\n","        self.fc2 = nn.Linear(128, 10)\n","    def forward(self, x):\n","        in_size = x.size(0)\n","        x = F.relu(self.mp1(self.conv1(x)))\n","        x = F.relu(self.mp2(self.conv2(x)))\n","        x = F.relu(self.mp3(self.conv3(x)))\n","        x = F.relu(self.conv4(x))\n","        x = x.view(in_size, -1)\n","        x = F.relu(self.fc(x))\n","        x = self.fc2(x)\n","\n","        return F.log_softmax(x)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"6EcvsMaJqq_j","colab_type":"code","colab":{}},"source":["#%%\n","def train(epoch, batchsize):\n","    \n","    model.train()\n","    total_loss = 0\n","    train_acc = 0\n","    c = 0;\n","    for batch_idx, data in enumerate(train_loader):\n","        c += 1\n","        label = data[1]\n","        label = label.to(dtype=torch.int64)\n","        data = data[0]\n","        data = np.reshape(data,(batch_size, 1, -1))\n","        data, target = Variable(data), Variable(label)\n","        optimizer.zero_grad()\n","        \n","        \n","        output = model(data.to(device))\n","        \n","        loss = F.nll_loss(output.to(device), target.to(device))\n","        total_loss += loss.detach().item()\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_acc += get_accuracy(output.to('cpu'), target, batch_size)\n","\n","        if (batch_idx % 10 == 0):\n","            print('Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}\\tTrain Accuracy: {:.6f}'.format(\n","              epoch, batch_idx * len(data), len(train_loader.dataset), 100. * batch_idx / len(train_loader), loss.item(), (train_acc/c)))\n","    return total_loss / batch_idx, train_acc/c\n","\n","def validate():\n","    correct = 0\n","    total = 0\n","    \n","\n","    for data in (validation_loader):\n","      \n","        label = data[1]\n","        label = label.to(dtype=torch.int64)\n","\n","        data = data[0]\n","        data = np.reshape(data, (validation_batch_size, 1, -1))\n","        data, target = Variable(data), Variable(label)\n","\n","        output = model(data.to(device))\n","\n","        _, predicted = torch.max(output.data, 1)\n","\n","        total += target.size(0)\n","\n","        correct += (predicted.to('cpu') == target).sum()\n","\n","    accuracy = 100 * correct / total\n","    print('Validation Accuracy: %.2f \\n' \n","            %(accuracy))\n","    return accuracy\n","\n","def test(batchsize):\n","    model.eval()\n","    test_loss = 0\n","    correct = 0\n","    correct_2 = 0\n","    correct_3 = 0\n","    total_pred = []\n","    total_target = []\n","    total_loss = 0\n","    total = 0;\n","    for data in test_loader:\n","        \n","        label = data[1]\n","        label = label.to(dtype=torch.int64)\n","        data = data[0]\n","        data = np.reshape(data,(batchsize, 1, -1))\n","        data, target = Variable(data), Variable(label)\n","        \n","        output = model(data.to(device))\n","\n","        _, predicted = torch.topk(output.data, 3)\n","\n","        total += target.size(0)\n","\n","\n","        correct_2 += (predicted[:,0].to('cpu') == target.to('cpu')).sum() + (predicted[:,1].to('cpu') == target.to('cpu')).sum()\n","        correct_3 += (predicted[:,0].to('cpu') == target.to('cpu')).sum() + (predicted[:,1].to('cpu') == target.to('cpu')).sum() + (predicted[:,2].to('cpu') == target.to('cpu')).sum()\n","\n","        \n","\n","        #test_loss = F.nll_loss(output.to('cpu'), target.to('cpu'))\n","        #total_loss += test_loss\n","\n","        pred = output.data.max(1, keepdim=True)[1]\n","        target = target.to(device)\n","        correct += pred.eq(target.data.view_as(pred)).cpu().sum()\n","        \n","        ###########################################################\n","        temp = pred.data.cpu().numpy()\n","        temp2 = target.data.cpu().numpy()\n","        temp = np.reshape(temp, (-1))\n","        temp2 = np.reshape(temp2, (-1))\n","        total_pred = np.concatenate((total_pred, temp), axis=0)\n","        total_target= np.concatenate((total_target, temp2), axis=0)\n","        #############################################################\n","    \n","    accuracy_top_2 = 100 * correct_2 / total\n","    accuracy_top_3 = 100 * correct_3 / total\n","\n","    print(\"Top 2 accuracy:\", accuracy_top_2.item())\n","    print(\"Top 3 accuracy:\", accuracy_top_3.item())\n","    test_loss /=  len(test_loader.dataset)\n","    total_loss /= len(test_loader.dataset)\n","    #print('\\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\\n'.format(test_loss, correct, len(test_loader.dataset), \n","     #                                                                                100. * correct / len(test_loader.dataset)))\n","    return total_pred, total_target, test_loss, ( 100.00 * correct / len(test_loader.dataset))\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ilPBA3Qyqv5K","colab_type":"code","colab":{}},"source":["# %%\n","if type(train_data).__module__ == np.__name__ :\n","        train_data = list(train_data)\n","# Training settings\n","batch_size = 50\n","validation_batch_size = 25\n","test_batch_size = 10\n","train_loader = torch.utils.data.DataLoader(dataset=train_data,\n","                                           batch_size = batch_size,\n","                                           shuffle=True)\n","validation_loader = torch.utils.data.DataLoader(dataset=validation_data, batch_size = validation_batch_size,shuffle=True)\n","\n","test_loader = torch.utils.data.DataLoader(dataset=test_data,\n","                                          batch_size = test_batch_size,\n","                                          shuffle=True)\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"UaIIYJEyqwnD","colab_type":"code","outputId":"0db34610-ac3d-4303-e140-0043e721e327","executionInfo":{"status":"ok","timestamp":1589112290284,"user_tz":-180,"elapsed":176841,"user":{"displayName":"Dogukan KÃ¶se","photoUrl":"","userId":"17163221167275333553"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["# %% Model \n","model = Net()\n","model = model.to(device)\n","\n","\n","optimizer = optim.Adam(model.parameters(), lr=0.001)\n","\n","epoch=100\n","test_loss_hist = np.arange(epoch).astype(dtype='float')\n","train_loss_hist = np.arange(epoch).astype(dtype='float')\n","validation_accuracy_hist = np.arange(epoch).astype(dtype='float')\n","train_accuracy_hist = np.arange(epoch).astype(dtype='float')\n","count = 0;\n","for i in range(epoch):\n","    train_loss_hist[i], train_accuracy_hist[i] = train(i, batch_size)\n","    validation_accuracy_hist[i] = validate()\n","    if (train_accuracy_hist[i] > 90):\n","      break\n","    count += 1\n"],"execution_count":30,"outputs":[{"output_type":"stream","text":["Train Epoch: 0 [0/700 (0%)]\tLoss: 2.296473\tTrain Accuracy: 14.000000\n","Train Epoch: 0 [500/700 (71%)]\tLoss: 2.306807\tTrain Accuracy: 11.090909\n","Validation Accuracy: 11.00 \n","\n","Train Epoch: 1 [0/700 (0%)]\tLoss: 2.216606\tTrain Accuracy: 10.000000\n","Train Epoch: 1 [500/700 (71%)]\tLoss: 2.294947\tTrain Accuracy: 14.727273\n","Validation Accuracy: 14.00 \n","\n","Train Epoch: 2 [0/700 (0%)]\tLoss: 2.206720\tTrain Accuracy: 14.000000\n","Train Epoch: 2 [500/700 (71%)]\tLoss: 2.081849\tTrain Accuracy: 15.818182\n","Validation Accuracy: 28.00 \n","\n","Train Epoch: 3 [0/700 (0%)]\tLoss: 2.148513\tTrain Accuracy: 24.000000\n","Train Epoch: 3 [500/700 (71%)]\tLoss: 1.944054\tTrain Accuracy: 22.545455\n","Validation Accuracy: 24.00 \n","\n","Train Epoch: 4 [0/700 (0%)]\tLoss: 2.195647\tTrain Accuracy: 26.000000\n","Train Epoch: 4 [500/700 (71%)]\tLoss: 2.093930\tTrain Accuracy: 23.818182\n","Validation Accuracy: 26.00 \n","\n","Train Epoch: 5 [0/700 (0%)]\tLoss: 2.055259\tTrain Accuracy: 24.000000\n","Train Epoch: 5 [500/700 (71%)]\tLoss: 1.819631\tTrain Accuracy: 29.272727\n","Validation Accuracy: 33.00 \n","\n","Train Epoch: 6 [0/700 (0%)]\tLoss: 1.818698\tTrain Accuracy: 28.000000\n","Train Epoch: 6 [500/700 (71%)]\tLoss: 1.846071\tTrain Accuracy: 28.545455\n","Validation Accuracy: 22.00 \n","\n","Train Epoch: 7 [0/700 (0%)]\tLoss: 1.850264\tTrain Accuracy: 28.000000\n","Train Epoch: 7 [500/700 (71%)]\tLoss: 1.873343\tTrain Accuracy: 32.909091\n","Validation Accuracy: 32.00 \n","\n","Train Epoch: 8 [0/700 (0%)]\tLoss: 1.800983\tTrain Accuracy: 34.000000\n","Train Epoch: 8 [500/700 (71%)]\tLoss: 1.685875\tTrain Accuracy: 32.181818\n","Validation Accuracy: 35.00 \n","\n","Train Epoch: 9 [0/700 (0%)]\tLoss: 1.651289\tTrain Accuracy: 38.000000\n","Train Epoch: 9 [500/700 (71%)]\tLoss: 1.752458\tTrain Accuracy: 35.454545\n","Validation Accuracy: 36.00 \n","\n","Train Epoch: 10 [0/700 (0%)]\tLoss: 1.508702\tTrain Accuracy: 44.000000\n","Train Epoch: 10 [500/700 (71%)]\tLoss: 1.553832\tTrain Accuracy: 36.181818\n","Validation Accuracy: 36.00 \n","\n","Train Epoch: 11 [0/700 (0%)]\tLoss: 1.521270\tTrain Accuracy: 44.000000\n","Train Epoch: 11 [500/700 (71%)]\tLoss: 1.511255\tTrain Accuracy: 40.363636\n","Validation Accuracy: 32.00 \n","\n","Train Epoch: 12 [0/700 (0%)]\tLoss: 1.594427\tTrain Accuracy: 52.000000\n","Train Epoch: 12 [500/700 (71%)]\tLoss: 1.509055\tTrain Accuracy: 45.454545\n","Validation Accuracy: 38.00 \n","\n","Train Epoch: 13 [0/700 (0%)]\tLoss: 1.390918\tTrain Accuracy: 48.000000\n","Train Epoch: 13 [500/700 (71%)]\tLoss: 1.497401\tTrain Accuracy: 45.818182\n","Validation Accuracy: 34.00 \n","\n","Train Epoch: 14 [0/700 (0%)]\tLoss: 1.643931\tTrain Accuracy: 40.000000\n","Train Epoch: 14 [500/700 (71%)]\tLoss: 1.475682\tTrain Accuracy: 47.090909\n","Validation Accuracy: 40.00 \n","\n","Train Epoch: 15 [0/700 (0%)]\tLoss: 1.199300\tTrain Accuracy: 60.000000\n","Train Epoch: 15 [500/700 (71%)]\tLoss: 1.297393\tTrain Accuracy: 53.454545\n","Validation Accuracy: 38.00 \n","\n","Train Epoch: 16 [0/700 (0%)]\tLoss: 1.340031\tTrain Accuracy: 46.000000\n","Train Epoch: 16 [500/700 (71%)]\tLoss: 1.141270\tTrain Accuracy: 49.636364\n","Validation Accuracy: 37.00 \n","\n","Train Epoch: 17 [0/700 (0%)]\tLoss: 1.115806\tTrain Accuracy: 56.000000\n","Train Epoch: 17 [500/700 (71%)]\tLoss: 1.279244\tTrain Accuracy: 56.363636\n","Validation Accuracy: 43.00 \n","\n","Train Epoch: 18 [0/700 (0%)]\tLoss: 0.960179\tTrain Accuracy: 66.000000\n","Train Epoch: 18 [500/700 (71%)]\tLoss: 0.836666\tTrain Accuracy: 64.909091\n","Validation Accuracy: 39.00 \n","\n","Train Epoch: 19 [0/700 (0%)]\tLoss: 0.833374\tTrain Accuracy: 68.000000\n","Train Epoch: 19 [500/700 (71%)]\tLoss: 0.788881\tTrain Accuracy: 72.181818\n","Validation Accuracy: 40.00 \n","\n","Train Epoch: 20 [0/700 (0%)]\tLoss: 0.768956\tTrain Accuracy: 76.000000\n","Train Epoch: 20 [500/700 (71%)]\tLoss: 0.693236\tTrain Accuracy: 76.181818\n","Validation Accuracy: 47.00 \n","\n","Train Epoch: 21 [0/700 (0%)]\tLoss: 0.389641\tTrain Accuracy: 90.000000\n","Train Epoch: 21 [500/700 (71%)]\tLoss: 0.376993\tTrain Accuracy: 85.454545\n","Validation Accuracy: 47.00 \n","\n","Train Epoch: 22 [0/700 (0%)]\tLoss: 0.246005\tTrain Accuracy: 96.000000\n","Train Epoch: 22 [500/700 (71%)]\tLoss: 0.434012\tTrain Accuracy: 88.000000\n","Validation Accuracy: 43.00 \n","\n","Train Epoch: 23 [0/700 (0%)]\tLoss: 0.258731\tTrain Accuracy: 98.000000\n","Train Epoch: 23 [500/700 (71%)]\tLoss: 0.244760\tTrain Accuracy: 92.727273\n","Validation Accuracy: 39.00 \n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"fTw-bbQpWGON","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"6f5b216c-0ce4-4d7a-8524-f61edf79082f","executionInfo":{"status":"ok","timestamp":1589112685677,"user_tz":-180,"elapsed":815,"user":{"displayName":"Dogukan KÃ¶se","photoUrl":"","userId":"17163221167275333553"}}},"source":[""],"execution_count":31,"outputs":[{"output_type":"stream","text":["(700, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nA-e_fECVbqa","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":799},"outputId":"69577e45-6ddd-49a3-94bc-ad5f7459bc9c","executionInfo":{"status":"ok","timestamp":1589112876460,"user_tz":-180,"elapsed":188459,"user":{"displayName":"Dogukan KÃ¶se","photoUrl":"","userId":"17163221167275333553"}}},"source":["train_data = train_data[:700]\n","train_data2 = np.concatenate((train_data,validation_data))\n","train_data2 = train_data2.tolist()\n","# Training settings\n","batch_size = 50\n","validation_batch_size = 25\n","test_batch_size = 10\n","train_loader = torch.utils.data.DataLoader(dataset=train_data2,\n","                                           batch_size = batch_size,\n","                                           shuffle=True)\n","\n","test_loader = torch.utils.data.DataLoader(dataset=test_data,\n","                                          batch_size = test_batch_size,\n","                                          shuffle=True)\n","\n","# %% Model \n","model = Net()\n","model = model.to(device)\n","\n","\n","optimizer = optim.Adam(model.parameters(), lr=0.001)\n","\n","epoch=100\n","test_loss_hist2 = np.arange(epoch).astype(dtype='float')\n","train_loss_hist2 = np.arange(epoch).astype(dtype='float')\n","validation_accuracy_hist2 = np.arange(epoch).astype(dtype='float')\n","train_accuracy_hist2 = np.arange(epoch).astype(dtype='float')\n","count = 0;\n","for i in range(epoch):\n","    train_loss_hist2[i], train_accuracy_hist2[i] = train(i, batch_size)\n","    if (train_accuracy_hist2[i] > 90):\n","      break\n","    count += 1"],"execution_count":32,"outputs":[{"output_type":"stream","text":["Train Epoch: 0 [0/800 (0%)]\tLoss: 2.304112\tTrain Accuracy: 8.000000\n","Train Epoch: 0 [500/800 (62%)]\tLoss: 2.362369\tTrain Accuracy: 10.545455\n","Train Epoch: 1 [0/800 (0%)]\tLoss: 2.291664\tTrain Accuracy: 20.000000\n","Train Epoch: 1 [500/800 (62%)]\tLoss: 2.066123\tTrain Accuracy: 20.545455\n","Train Epoch: 2 [0/800 (0%)]\tLoss: 2.103111\tTrain Accuracy: 22.000000\n","Train Epoch: 2 [500/800 (62%)]\tLoss: 1.876223\tTrain Accuracy: 26.909091\n","Train Epoch: 3 [0/800 (0%)]\tLoss: 1.788563\tTrain Accuracy: 28.000000\n","Train Epoch: 3 [500/800 (62%)]\tLoss: 1.898377\tTrain Accuracy: 29.090909\n","Train Epoch: 4 [0/800 (0%)]\tLoss: 1.930888\tTrain Accuracy: 16.000000\n","Train Epoch: 4 [500/800 (62%)]\tLoss: 1.737811\tTrain Accuracy: 25.090909\n","Train Epoch: 5 [0/800 (0%)]\tLoss: 1.715588\tTrain Accuracy: 30.000000\n","Train Epoch: 5 [500/800 (62%)]\tLoss: 1.983357\tTrain Accuracy: 35.636364\n","Train Epoch: 6 [0/800 (0%)]\tLoss: 1.798806\tTrain Accuracy: 32.000000\n","Train Epoch: 6 [500/800 (62%)]\tLoss: 1.540081\tTrain Accuracy: 34.909091\n","Train Epoch: 7 [0/800 (0%)]\tLoss: 1.792341\tTrain Accuracy: 38.000000\n","Train Epoch: 7 [500/800 (62%)]\tLoss: 1.724407\tTrain Accuracy: 41.272727\n","Train Epoch: 8 [0/800 (0%)]\tLoss: 1.422075\tTrain Accuracy: 40.000000\n","Train Epoch: 8 [500/800 (62%)]\tLoss: 1.698030\tTrain Accuracy: 39.090909\n","Train Epoch: 9 [0/800 (0%)]\tLoss: 1.674441\tTrain Accuracy: 44.000000\n","Train Epoch: 9 [500/800 (62%)]\tLoss: 1.468218\tTrain Accuracy: 44.909091\n","Train Epoch: 10 [0/800 (0%)]\tLoss: 1.415135\tTrain Accuracy: 54.000000\n","Train Epoch: 10 [500/800 (62%)]\tLoss: 1.339990\tTrain Accuracy: 48.363636\n","Train Epoch: 11 [0/800 (0%)]\tLoss: 1.355900\tTrain Accuracy: 46.000000\n","Train Epoch: 11 [500/800 (62%)]\tLoss: 1.538198\tTrain Accuracy: 47.090909\n","Train Epoch: 12 [0/800 (0%)]\tLoss: 1.683295\tTrain Accuracy: 30.000000\n","Train Epoch: 12 [500/800 (62%)]\tLoss: 1.430353\tTrain Accuracy: 44.545455\n","Train Epoch: 13 [0/800 (0%)]\tLoss: 1.634683\tTrain Accuracy: 36.000000\n","Train Epoch: 13 [500/800 (62%)]\tLoss: 1.287464\tTrain Accuracy: 50.545455\n","Train Epoch: 14 [0/800 (0%)]\tLoss: 1.350827\tTrain Accuracy: 50.000000\n","Train Epoch: 14 [500/800 (62%)]\tLoss: 1.352316\tTrain Accuracy: 50.545455\n","Train Epoch: 15 [0/800 (0%)]\tLoss: 1.091587\tTrain Accuracy: 66.000000\n","Train Epoch: 15 [500/800 (62%)]\tLoss: 1.205616\tTrain Accuracy: 57.818182\n","Train Epoch: 16 [0/800 (0%)]\tLoss: 1.098534\tTrain Accuracy: 58.000000\n","Train Epoch: 16 [500/800 (62%)]\tLoss: 0.982500\tTrain Accuracy: 61.818182\n","Train Epoch: 17 [0/800 (0%)]\tLoss: 0.878347\tTrain Accuracy: 68.000000\n","Train Epoch: 17 [500/800 (62%)]\tLoss: 0.764565\tTrain Accuracy: 68.363636\n","Train Epoch: 18 [0/800 (0%)]\tLoss: 0.813156\tTrain Accuracy: 74.000000\n","Train Epoch: 18 [500/800 (62%)]\tLoss: 0.632443\tTrain Accuracy: 71.090909\n","Train Epoch: 19 [0/800 (0%)]\tLoss: 0.849723\tTrain Accuracy: 74.000000\n","Train Epoch: 19 [500/800 (62%)]\tLoss: 0.895481\tTrain Accuracy: 70.727273\n","Train Epoch: 20 [0/800 (0%)]\tLoss: 0.539865\tTrain Accuracy: 82.000000\n","Train Epoch: 20 [500/800 (62%)]\tLoss: 0.604341\tTrain Accuracy: 84.363636\n","Train Epoch: 21 [0/800 (0%)]\tLoss: 0.389797\tTrain Accuracy: 88.000000\n","Train Epoch: 21 [500/800 (62%)]\tLoss: 0.282445\tTrain Accuracy: 88.909091\n","Train Epoch: 22 [0/800 (0%)]\tLoss: 0.155142\tTrain Accuracy: 98.000000\n","Train Epoch: 22 [500/800 (62%)]\tLoss: 0.259417\tTrain Accuracy: 92.727273\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"yOrfoCqdqy_K","colab_type":"code","outputId":"110dd8ef-d35c-481a-fa84-05f06819b7cf","executionInfo":{"status":"ok","timestamp":1589116479591,"user_tz":-180,"elapsed":1713,"user":{"displayName":"Dogukan KÃ¶se","photoUrl":"","userId":"17163221167275333553"}},"colab":{"base_uri":"https://localhost:8080/","height":992}},"source":["# %%\n","test_accuracy_hist = np.arange(epoch).astype(dtype='float')\n","pred, target, test_loss_hist, test_accuracy_hist = test(test_batch_size)\n","report_performance(pred, target)\n","\n","print(\"The End\")\n","\n","        "],"execution_count":44,"outputs":[{"output_type":"stream","text":["Top 2 accuracy: 65\n","Top 3 accuracy: 79\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","       blues       0.29      0.32      0.30        19\n","   classical       0.77      0.85      0.81        20\n","     country       0.30      0.44      0.36        16\n","       disco       1.00      0.46      0.63        24\n","      hiphop       0.60      0.13      0.21        23\n","        jazz       0.61      0.64      0.62        22\n","       metal       0.58      0.75      0.65        20\n","         pop       0.55      0.55      0.55        20\n","      reggae       0.58      0.70      0.64        20\n","        rock       0.16      0.25      0.20        16\n","\n","    accuracy                           0.51       200\n","   macro avg       0.54      0.51      0.50       200\n","weighted avg       0.57      0.51      0.51       200\n","\n","Accuracy for blues is: 0.2857142857142857 \n","\n","Accuracy for classical is: 0.7727272727272727 \n","\n","Accuracy for country is: 0.30434782608695654 \n","\n","Accuracy for disco is: 1.0 \n","\n","Accuracy for hiphop is: 0.6 \n","\n","Accuracy for jazz is: 0.6086956521739131 \n","\n","Accuracy for metal is: 0.5769230769230769 \n","\n","Accuracy for pop is: 0.55 \n","\n","Accuracy for reggae is: 0.5833333333333334 \n","\n","Accuracy for rock is: 0.16 \n","\n","The End\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"6_GTjnzBqzcI","colab_type":"code","outputId":"27ca91d6-16a4-49b7-91a8-c6ef6694e765","executionInfo":{"status":"ok","timestamp":1589112904371,"user_tz":-180,"elapsed":3519,"user":{"displayName":"Dogukan KÃ¶se","photoUrl":"","userId":"17163221167275333553"}},"colab":{"base_uri":"https://localhost:8080/","height":590}},"source":["#%%\n","plt.plot( train_accuracy_hist[:count], 'g', label='Training Accuracy')\n","plt.plot(validation_accuracy_hist[:count], 'b', label='Validation Accuracy')\n","plt.title('Training Accuracies')\n","plt.xlabel('Epochs')\n","plt.ylabel('Training')\n","plt.legend()\n","plt.show()  \n","\n","\n","\n","plt.plot(train_loss_hist[:count], 'g', label='Training Loss')\n","plt.title('Training Loss')\n","plt.xlabel('Epochs')\n","plt.ylabel('Loss')\n","plt.legend()\n","plt.show()  \n","\n","\n","print(\"The End\")"],"execution_count":34,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["The End\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"O1DldqNyl9_1","colab_type":"code","colab":{}},"source":["\n","\n"],"execution_count":0,"outputs":[]}]}