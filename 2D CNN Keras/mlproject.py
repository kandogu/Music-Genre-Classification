# -*- coding: utf-8 -*-
"""MLProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TRWMgSSUT4aQ2UbI28aepIV9TB0hAv9K
"""

import os
import zipfile

"""# Data Preprocessing"""

test_data_path = 'drive/My Drive/ml2/spec_data.zip'
# train_data_path = 'drive/My Drive/ml2/train.zip'
local_zip = test_data_path
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('test')
zip_ref.close()

import cv2

img_array = cv2.imread(os.path.join(pop_directory, 'pop00001.png'))

img_array.shape

import tensorflow as tf
from tensorflow.keras import regularizers



model = tf.keras.models.Sequential([

    tf.keras.layers.Conv2D(8, (5,5),activation='relu', input_shape=(400, 1000, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Conv2D(8, (5,5),activation='relu'),

    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Conv2D(16, (3,3),activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    
    tf.keras.layers.Conv2D(32, (3,3),activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(1024, activation='relu'),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(10, activation='softmax')
])
model.summary()

from tensorflow.keras.optimizers import RMSprop

model.compile(loss='categorical_crossentropy',
              optimizer=tf.keras.optimizers.Adam(
    learning_rate=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-07, amsgrad=False,
    name='Adam'
),
              metrics=['accuracy'])

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale=1/25,validation_split = 0.40,)
# test_datagen = ImageDataGenerator(rescale=1/255)

train_generator = train_datagen.flow_from_directory(
        'test/mel_spec_data/', 
        target_size=(400, 1000),  
        batch_size=32,
        class_mode='categorical',
        subset="training")

validation_generator = train_datagen.flow_from_directory(
    'test/mel_spec_data/', # same directory as training data
    target_size=(400,1000),
    batch_size=32,
    class_mode='categorical',
    subset='validation') # set as validation data

# test_generator = test_datagen.flow_from_directory(
#     'test/test',
#     target_size=(120,120),
#     batch_size=128,
#     class_mode='categorical',  
# )

history = model.fit_generator(
      train_generator,
      steps_per_epoch=8,  
      epochs=20,
      validation_data = validation_generator, 
      validation_steps = 8,
      verbose=1)

S